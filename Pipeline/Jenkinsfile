pipeline {
    agent any
    parameters {
        choice(
            name: 'PYTHON_SCRIPT',
            choices: ['main.py','redis_main.py'],
            description: '请选择要运行的 Python 脚本'
        )
    }

    environment {
        VENV_PATH = 'venv'
        PIP_INDEX = 'https://pypi.tuna.tsinghua.edu.cn/simple'
        PIP_CACHE = '/tmp/pip-cache'
        REQ_HASH_FILE = '.requirements.hash'
    }

    stages {
        stage('初始化环境') {
            steps {
                echo '🛠️ 打印工作目录和 Python 版本信息'
                sh 'pwd || true'
                sh 'python3 --version || true'
                sh 'pip3 --version || true'
            }
        }

        stage('准备 Python 虚拟环境') {
            steps {
                script {
                    def venvExists = fileExists("${VENV_PATH}/bin/activate")
                    if (!venvExists) {
                        echo "📦 未检测到虚拟环境，正在创建"
                        sh "python3 -m venv ${VENV_PATH}"
                    } else {
                        echo "✅ 虚拟环境已存在，跳过创建"
                    }
                }
            }
        }

        stage('安装依赖（仅在变更时）') {
            steps {
                script {
                    echo "🔍 检查 requirements.txt 是否变更"
                    def currentHash = sh(script: "sha256sum requirements.txt | awk '{print \$1}'", returnStdout: true).trim()
                    def cachedHash = fileExists("${REQ_HASH_FILE}") ? readFile("${REQ_HASH_FILE}").trim() : ''

                    if (currentHash != cachedHash) {
                        echo "📦 requirements.txt 有变更，开始安装依赖"
                        sh """
                            . ${VENV_PATH}/bin/activate && \
                            pip install -r requirements.txt \
                                --default-timeout=100 \
                                --retries=5 \
                                --cache-dir=${PIP_CACHE} \
                                -i ${PIP_INDEX}
                        """
                        writeFile file: "${REQ_HASH_FILE}", text: currentHash
                    } else {
                        echo "⏩ requirements.txt 无变更，跳过依赖安装"
                    }
                }
            }
        }

        stage('执行 接口自动化Python 脚本') {
            steps {
                echo "🚀 执行 main.py"
                sh """
                    . ${VENV_PATH}/bin/activate && \
                    python ${params.PYTHON_SCRIPT}
                """
            }
        }
                stage('生成excel报告'){
            steps {
                echo "🚀 生成excel报告"
                sh """
                python generate_report_main.py
                """
            }
        }
    }

        
    post {
        failure {
            echo '❌ 构建失败，请检查日志。'
        }
        success {
            echo '✅ 构建成功。'
        }
    }
}
